CREATE DATABASE HRS7;
USE HRS7;

-- Create the users table (main table for all users)
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    fullname VARCHAR(255) NOT NULL,
    dob DATE NOT NULL,
    user_type ENUM('patient', 'doctor', 'admin') NOT NULL,
    unique_id VARCHAR(50) NOT NULL UNIQUE,     
    nid VARCHAR(50),
    birth_certificate VARCHAR(50),
    phone VARCHAR(20) NOT NULL unique,
    email VARCHAR(255) NOT NULL UNIQUE,
    district VARCHAR(100),
    password VARCHAR(255) NOT NULL,
    blood_group VARCHAR(3),
    medical_name VARCHAR(255) DEFAULT 'Not Applicable',    
    license_number VARCHAR(100) DEFAULT 'Not Applicable',  
	specialist VARCHAR(100) DEFAULT 'Not Applicable',  

    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_unique_id (unique_id),            
    INDEX idx_email (email),                    
    INDEX idx_phone (phone)                   
);

-- Create the patients table
CREATE TABLE patients (
    id INT AUTO_INCREMENT PRIMARY KEY,
    unique_id VARCHAR(50) NOT NULL UNIQUE,
    fullname VARCHAR(255) NOT NULL,
    dob DATE NOT NULL,
    user_type ENUM('patient') NOT NULL DEFAULT 'patient',
    nid VARCHAR(50),
    birth_certificate VARCHAR(50),
    phone VARCHAR(20) NOT NULL unique,
    email VARCHAR(255) NOT NULL unique,
    district VARCHAR(100),
    password VARCHAR(255) NOT NULL,
    blood_group VARCHAR(3),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (unique_id) REFERENCES users(unique_id) ON DELETE CASCADE,
    INDEX idx_phone (phone),                    
    INDEX idx_email (email)                    
);

-- Create the doctors table
CREATE TABLE doctors (
    id INT AUTO_INCREMENT PRIMARY KEY,
    unique_id VARCHAR(50) NOT NULL UNIQUE,
    fullname VARCHAR(255) NOT NULL,
    dob DATE NOT NULL,
    user_type ENUM('doctor') NOT NULL DEFAULT 'doctor',
    nid VARCHAR(50),
    birth_certificate VARCHAR(50),
    phone VARCHAR(20) NOT NULL unique,
    email VARCHAR(255) NOT NULL unique,
    district VARCHAR(100),
    password VARCHAR(255) NOT NULL,
    blood_group VARCHAR(3),
    medical_name VARCHAR(255) NOT NULL,        
    license_number VARCHAR(100) NOT NULL,       
    specialist VARCHAR(100) NOT NULL,      
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (unique_id) REFERENCES users(unique_id) ON DELETE CASCADE,
    INDEX idx_phone (phone),                    
    INDEX idx_email (email),                   
    INDEX idx_license (license_number)         
);

-- Create the admins table
CREATE TABLE admins (
    id INT AUTO_INCREMENT PRIMARY KEY,
    unique_id VARCHAR(50) NOT NULL UNIQUE,
    fullname VARCHAR(255) NOT NULL,
    dob DATE NOT NULL,
    user_type ENUM('admin') NOT NULL DEFAULT 'admin',
    nid VARCHAR(50),
    birth_certificate VARCHAR(50),
    phone VARCHAR(20) NOT NULL unique,
    email VARCHAR(255) NOT NULL unique,
    district VARCHAR(100),
    password VARCHAR(255) NOT NULL,
    blood_group VARCHAR(3),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (unique_id) REFERENCES users(unique_id) ON DELETE CASCADE,
    INDEX idx_phone (phone),                   
    INDEX idx_email (email)                    
);
CREATE TABLE medical (
    unique_id VARCHAR(255) PRIMARY KEY, 
    user_type ENUM('medical') NOT NULL DEFAULT 'medical',
    phone VARCHAR(15) NOT NULL unique,
    email VARCHAR(255) UNIQUE NOT NULL,
    district VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    medical_name VARCHAR(255) NOT NULL, 
    license_number VARCHAR(50) UNIQUE NOT NULL, 
    address TEXT 
);

CREATE TABLE patients_data (
    id INT AUTO_INCREMENT PRIMARY KEY,
    patient_id VARCHAR(50) NOT NULL,
    patient_name VARCHAR(255) NOT NULL,
    current_address VARCHAR(255),
    age INT NOT NULL,
    admitted_medical_id varchar(50),
    admitted_medical_name VARCHAR(255),  
    admitted_bed_no VARCHAR(50),         
    admission_date DATE NOT NULL,
    admission_type VARCHAR(50),
    discharge_date DATE,
    doctor_id VARCHAR(50),
    doctor_name VARCHAR(255) NOT NULL,
    doctor_signature VARCHAR(255),
    disease_name VARCHAR(255),
    symptoms TEXT,
    diagnosis TEXT,
    treatment_summary TEXT,
    prescriptions TEXT,
    tests_results TEXT,
    follow_up TEXT,
    comments TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (patient_id) REFERENCES users(unique_id) ON DELETE CASCADE,
    FOREIGN KEY (doctor_id) REFERENCES users(unique_id) ON DELETE SET NULL,
    FOREIGN KEY (admitted_medical_id) REFERENCES medical(unique_id) ON DELETE SET NULL,
    INDEX idx_patient_id (patient_id),
    INDEX idx_doctor_id (doctor_id),
    INDEX idx_admitted_medical_id (admitted_medical_id)
);

CREATE TABLE appointments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    patient_id VARCHAR(50) NOT NULL,
    doctor_id VARCHAR(50) NOT NULL,
    appointment_date DATE NOT NULL,
    appointment_time TIME NOT NULL,
    symptoms TEXT,
    status ENUM('scheduled', 'completed', 'cancelled') NOT NULL DEFAULT 'scheduled',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraints
    FOREIGN KEY (patient_id) REFERENCES users(unique_id) ON DELETE CASCADE,
    FOREIGN KEY (doctor_id) REFERENCES users(unique_id) ON DELETE CASCADE,
    
    -- Indexes for better query performance
    INDEX idx_patient_id (patient_id),
    INDEX idx_doctor_id (doctor_id),
    INDEX idx_appointment_date (appointment_date),
    INDEX idx_status (status)
);



CREATE TABLE bill_payments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    unique_id VARCHAR(50) NOT NULL,
    name VARCHAR(255) NOT NULL,
    original_amount DECIMAL(10, 2) NOT NULL,
    discount_percentage DECIMAL(5, 2) DEFAULT 0,
    payable_amount DECIMAL(10, 2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (unique_id) REFERENCES users(unique_id) ON DELETE CASCADE
);

  DELIMITER //

  CREATE FUNCTION calculate_discount(unique_id VARCHAR(50), billing_amount DECIMAL(10,2)) 
  RETURNS DECIMAL(10,2)
  DETERMINISTIC
  BEGIN
      DECLARE discount_percentage DECIMAL(5,2) DEFAULT 0;
      

      IF unique_id REGEXP '^[Pp]' THEN
          SET discount_percentage = 0;
      ELSE
          SET discount_percentage = 5;
      END IF;
      
      RETURN discount_percentage;
  END //
  
  DELIMITER ;

-- Function for Calculate Age Range

CREATE DEFINER=root`@`localhost PROCEDURE GetUsersByAgeRange(IN minAge INT, IN maxAge INT)
BEGIN
    SELECT 
        u.unique_id, 
        u.fullname, 
        pd.age, 
        pd.disease_name 
    FROM 
        users u
    INNER JOIN patients_data pd 
        ON u.unique_id = pd.patient_id
    WHERE 
        pd.age BETWEEN minAge AND maxAge;
END


select * from users;
select * from admins;
select * from doctors;
select * from patients;
select * from medical;
select * from patients_data; 
select * from appointments;
select * from bill_payments;


